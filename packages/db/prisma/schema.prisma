
generator client {
  provider = "prisma-client-js"
  output   = env("PRISMA_CLIENT_OUTPUT")
}

// we will need to generate two clinets as other than next js application will be not able to use the generated/prisma client due to module conflict

//so generate two clients one for next js (/generated/prisma) and one for ws-server (@prisma/client)

// for generating clint for next js set output path to ../src/generated/prisma
// for generating clint for ws-server set output path  to default by removing the output path

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  ownedRooms  Room[]        @relation("RoomOwner")
  roomMembers RoomMember[]
  shapes      Shape[]
  messages    Message[]
  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
  @@map("verification")
}

model Room {
  id          String   @id @default(cuid())
  name        String   @default("Untitled Room")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User         @relation("RoomOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  members     RoomMember[]
  shapes      Shape[]
  messages    Message[]
  isShared    Boolean    @default(false)
  @@map("rooms")
}

model RoomMember {
  id       String           @id @default(cuid())
  role     RoomMemberRole   @default(MEMBER)
  joinedAt DateTime         @default(now())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  room     Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId   String
  @@unique([userId, roomId])
  @@map("room_members")
}

model Shape {
  id        String   @id @default(cuid())
  type      ShapeType
  dataFromRoughJs Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String
  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String
  @@map("shapes")
}

model Message {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now())
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  room      Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String
  @@map("messages")
}

enum RoomMemberRole {
  ADMIN
  MEMBER
}

enum ShapeType {
  RECTANGLE
  DIAMOND
  ELLIPSE
  LINE
  ARROW
  FREEDRAW
  TEXT
  IMAGE
}