generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  ownedRooms      Room[]       @relation("RoomOwner")
  roomMemberships RoomMember[]
  shapes          Shape[]
  messages        Message[]
  
  @@map("users")
}

model Room {
  id          String   @id @default(cuid())
  name        String   @default("Untitled Room")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  owner       User         @relation("RoomOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  members     RoomMember[]
  shapes      Shape[]
  messages    Message[]
  isShared    Boolean    @default(false)
  
  @@map("rooms")
}

model RoomMember {
  id       String           @id @default(cuid())
  role     RoomMemberRole   @default(MEMBER)
  joinedAt DateTime         @default(now())
  
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  room     Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId   String
  
  @@unique([userId, roomId])
  @@map("room_members")
}


model Shape {
  id        String   @id @default(cuid())
  type      ShapeType
  dataFromRoughJs Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room      Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String
  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  @@map("shapes")
}

// model Shape {
//   id        String    @id @default(cuid())
//   type      ShapeType
  
//   // Basic shape properties
//   x         Float
//   y         Float
//   width     Float
//   height    Float
  
//   // RoughJS drawable object (serialized JSON) - contains sets and all drawing instructions
//   drawable  Json
  
//   // Shape styling properties (for UI controls and fallback)
//   stroke          String  @default("#000000")
//   strokeWidth     Float   @default(1)
//   fill            String  @default("transparent")
//   fillStyle       String  @default("hachure") // "hachure" | "cross-hatch" | "solid" | "zigzag"
//   strokeStyle     String  @default("solid") // "solid" | "dashed" | "dotted"
//   roughness       Float   @default(1)
//   bowing          Float   @default(1)
//   seed            Int     @default(0)
//   opacity         Float   @default(1)
  
//   // Element-specific data (for text content, points, etc.)
//   elementData     Json    @default("{}")
  
//   // Timestamps
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
  
//   room      Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
//   roomId    String
//   creator   User   @relation(fields: [creatorId], references: [id])
//   creatorId String

//   @@map("shapes")
// }

model Message {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now())
  
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  room      Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String

  @@map("messages")
}

enum RoomMemberRole {
  ADMIN
  MEMBER
}

enum ShapeType {
  RECTANGLE
  DIAMOND
  ELLIPSE
  LINE
  ARROW
  FREEDRAW
  TEXT
  IMAGE
}

